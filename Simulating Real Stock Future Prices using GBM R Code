data <- read.csv("~/Desktop/AMZN/AMZN.csv")
data$Date <- as.Date(data$Date)
data_amzn <- data$Adj.Close

returns <- diff(log(data_amzn))
drift <- mean(returns)
volatility <- sd(returns)

S0 <- tail(data_amzn, 1)
num_simulations <- 10000
time_horizon <- 252
simulated_paths <- matrix(ncol = time_horizon, nrow = num_simulations)

set.seed(185)
for (i in 1:num_simulations) {
  simulated_prices <- numeric(time_horizon)
  simulated_prices[1] <- S0
  
  for (t in 2:time_horizon) {
    Z <- rnorm(1)
    simulated_prices[t] <- simulated_prices[t-1] * exp((drift - 0.5 * volatility^2) + volatility * sqrt(1/252) * Z)
  }
  
  simulated_paths[i,] <- simulated_prices
}

plot(1:time_horizon, simulated_paths[1,], type = 'l', main = 'Simulated Future Prices for $AMZN Stock',
     xlab = 'Trading Day', ylab = 'Price (USD)', col = rgb(0, 0, 1, 0.1), ylim = range(simulated_paths))
for (i in 2:num_simulations) {
  lines(1:time_horizon, simulated_paths[i,], col = rgb(0, 0, 1, 0.1))
}

average_path <- apply(simulated_paths, 2, mean)
lines(1:time_horizon, average_path, col = 'red', lwd = 2)
legend("topleft", legend = c("Average Path", "1000 Simulated Paths"), col = c("red", "blue"),
       lty = 1, lwd = 2, bty = "n", cex = 0.8, merge = TRUE, text.col = "black", bg = 'transparent', inset = c(0.02, 0.02))

last_date <- tail(data$Date, 1)
prediction_dates <- seq(from = last_date + 1, by = "day", length.out = time_horizon)
par(mar = c(5, 4, 4, 2) + 0.1)
range_dates <- range(c(data$Date, prediction_dates))

plot(data$Date, data_amzn, type = 'l', col = 'black', ylab = 'Price (USD)',
     xlim = range_dates, ylim=c(50, max(c(data_amzn, simulated_paths))),
     main = 'Actual and Simulated Future Prices for $AMZN Stock', xlab = "Date", xaxt = 'n')

for (i in 1:num_simulations) {
  lines(prediction_dates, simulated_paths[i,], col = 'blue', lwd = 0.1)
}

average_path <- apply(simulated_paths, 2, mean)
lines(prediction_dates, average_path, col = 'red', lwd = 2)
legend("topleft", legend = c("Actual", "Simulated Paths", "Average Path"), col = c("black", "blue", "red"),
       lty = 1, lwd = c(1, 1, 2), cex = 0.8)
years <- format(seq(from = min(data$Date), to = max(prediction_dates), by = "years"), "%Y")
axis_dates <- as.Date(paste0(years, "-01-01"))
axis(1, at = axis_dates, labels = years)

fixed_point <- 100
theoretical_price <- S0 * exp((drift - 0.5 * volatility^2) * fixed_point + volatility * sqrt(fixed_point/252) * 0)
average_simulated_price <- average_path[fixed_point]

cat("Theoretical Price using GBM at day", fixed_point, ":", theoretical_price, "\n")
cat("Average Simulated Price at day", fixed_point, ":", average_simulated_price, "\n")
difference <- theoretical_price - average_simulated_price
cat("Difference between Theoretical and Simulated Price:", difference, "\n")

highest_end_value <- max(simulated_paths[, time_horizon])
lowest_end_value <- min(simulated_paths[, time_horizon])

cat("Highest end value across all simulations:", highest_end_value, "\n")
cat("Lowest end value across all simulations:", lowest_end_value, "\n")

selected_day <- 100
selected_day_prices <- simulated_paths[, selected_day]

number_of_bins <- 20

hist_result <- hist(selected_day_prices, breaks = number_of_bins, plot = FALSE)
hist(selected_day_prices, breaks = hist_result$breaks, 
     main = paste("Probability Distribution of Simulated Prices on Day", selected_day),
     xlab = "Simulated Price (USD)", ylab = "Frequency", col = 'blue', border = 'white')

density <- density(selected_day_prices)
lines(density$x, density$y * length(selected_day_prices) * diff(hist_result$mids)[1], col = 'red', lwd = 2)

legend("topright", legend = c("Histogram of Prices", "Density Estimate"), 
       fill = c("blue", "red"), border = "white", bty = "n", cex = 0.8)

price_range_counts <- hist_result$counts
price_range_probabilities <- price_range_counts / num_simulations
price_ranges <- paste(round(hist_result$breaks[-length(hist_result$breaks)], 2), 
                      round(hist_result$breaks[-1], 2), sep = " - ")

price_range_table <- data.frame(
  Range = price_ranges,
  Count = price_range_counts,
  Probability = price_range_probabilities
)

print(price_range_table)
